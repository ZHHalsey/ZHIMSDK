// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serv.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum CMD_ID_SERV

typedef GPB_ENUM(CMD_ID_SERV) {
  /** rpc节点上线后通知网关 */
  CMD_ID_SERV_R2GclientOnlineMsgId = 100,

  /** rpc节点上线后通知网关的回复 */
  CMD_ID_SERV_G2RclientOnlineMsgId = 101,

  /** rpc到gate的ping消息 */
  CMD_ID_SERV_R2GpingMsgId = 102,
  CMD_ID_SERV_G2RpongMsgId = 103,

  /** 网关向rpc发的包装消息 */
  CMD_ID_SERV_G2RcommonMsgId = 201,

  /** 游戏向rpc发的包装消息 */
  CMD_ID_SERV_R2GcommonMsgId = 202,
};

GPBEnumDescriptor *CMD_ID_SERV_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CMD_ID_SERV_IsValidValue(int32_t value);

#pragma mark - ServRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ServRoot : GPBRootObject
@end

#pragma mark - R2GClientOnlineMsg

typedef GPB_ENUM(R2GClientOnlineMsg_FieldNumber) {
  R2GClientOnlineMsg_FieldNumber_Name = 1,
  R2GClientOnlineMsg_FieldNumber_NodeId = 2,
  R2GClientOnlineMsg_FieldNumber_NodeType = 3,
  R2GClientOnlineMsg_FieldNumber_KeepAlive = 4,
};

GPB_FINAL @interface R2GClientOnlineMsg : GPBMessage

/** 唯一名称 nodeType.nodeId */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** 远程节点id */
@property(nonatomic, readwrite) int32_t nodeId;

@property(nonatomic, readwrite) BOOL hasNodeId;
/** 远程节点名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeType;
/** Test to see if @c nodeType has been set. */
@property(nonatomic, readwrite) BOOL hasNodeType;

/** 存活时间 */
@property(nonatomic, readwrite) int32_t keepAlive;

@property(nonatomic, readwrite) BOOL hasKeepAlive;
@end

#pragma mark - G2RClientOnlineMsg

typedef GPB_ENUM(G2RClientOnlineMsg_FieldNumber) {
  G2RClientOnlineMsg_FieldNumber_NodeName = 1,
};

GPB_FINAL @interface G2RClientOnlineMsg : GPBMessage

/** 节点名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeName;
/** Test to see if @c nodeName has been set. */
@property(nonatomic, readwrite) BOOL hasNodeName;

@end

#pragma mark - R2GPingMsg

typedef GPB_ENUM(R2GPingMsg_FieldNumber) {
  R2GPingMsg_FieldNumber_NodeName = 1,
};

GPB_FINAL @interface R2GPingMsg : GPBMessage

/** 节点名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeName;
/** Test to see if @c nodeName has been set. */
@property(nonatomic, readwrite) BOOL hasNodeName;

@end

#pragma mark - G2RPongMsg

typedef GPB_ENUM(G2RPongMsg_FieldNumber) {
  G2RPongMsg_FieldNumber_NodeName = 1,
};

GPB_FINAL @interface G2RPongMsg : GPBMessage

/** 节点名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeName;
/** Test to see if @c nodeName has been set. */
@property(nonatomic, readwrite) BOOL hasNodeName;

@end

#pragma mark - G2RCommonMsg

typedef GPB_ENUM(G2RCommonMsg_FieldNumber) {
  G2RCommonMsg_FieldNumber_FromNode = 1,
  G2RCommonMsg_FieldNumber_PlayerId = 2,
  G2RCommonMsg_FieldNumber_MsgId = 3,
  G2RCommonMsg_FieldNumber_Msg = 4,
};

GPB_FINAL @interface G2RCommonMsg : GPBMessage

/** 从哪个gate来的 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromNode;
/** Test to see if @c fromNode has been set. */
@property(nonatomic, readwrite) BOOL hasFromNode;

/** 定位是哪个channel的 */
@property(nonatomic, readwrite) int64_t playerId;

@property(nonatomic, readwrite) BOOL hasPlayerId;
/** 包装的msgId */
@property(nonatomic, readwrite) int32_t msgId;

@property(nonatomic, readwrite) BOOL hasMsgId;
/** 上一个消息 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *msg;
/** Test to see if @c msg has been set. */
@property(nonatomic, readwrite) BOOL hasMsg;

@end

#pragma mark - R2GCommonMsg

typedef GPB_ENUM(R2GCommonMsg_FieldNumber) {
  R2GCommonMsg_FieldNumber_PlayerId = 1,
  R2GCommonMsg_FieldNumber_ChannelCode = 2,
  R2GCommonMsg_FieldNumber_FilterPlayerIds = 3,
  R2GCommonMsg_FieldNumber_MsgId = 4,
  R2GCommonMsg_FieldNumber_Msg = 5,
};

GPB_FINAL @interface R2GCommonMsg : GPBMessage

/** 定位是哪个channel的 */
@property(nonatomic, readwrite) int64_t playerId;

@property(nonatomic, readwrite) BOOL hasPlayerId;
/** 群发消息有channelCode */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelCode;
/** Test to see if @c channelCode has been set. */
@property(nonatomic, readwrite) BOOL hasChannelCode;

/** 群发消息过滤接受玩家 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *filterPlayerIds;
/** Test to see if @c filterPlayerIds has been set. */
@property(nonatomic, readwrite) BOOL hasFilterPlayerIds;

/** 包装的msgId */
@property(nonatomic, readwrite) int32_t msgId;

@property(nonatomic, readwrite) BOOL hasMsgId;
/** 上一个消息 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *msg;
/** Test to see if @c msg has been set. */
@property(nonatomic, readwrite) BOOL hasMsg;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
