// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serv.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Serv.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ServRoot

@implementation ServRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ServRoot_FileDescriptor

static GPBFileDescriptor *ServRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum CMD_ID_SERV

GPBEnumDescriptor *CMD_ID_SERV_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "R2GclientOnlineMsgId\000G2RclientOnlineMsgI"
        "d\000R2GpingMsgId\000G2RpongMsgId\000G2RcommonMsg"
        "Id\000R2GcommonMsgId\000";
    static const int32_t values[] = {
        CMD_ID_SERV_R2GclientOnlineMsgId,
        CMD_ID_SERV_G2RclientOnlineMsgId,
        CMD_ID_SERV_R2GpingMsgId,
        CMD_ID_SERV_G2RpongMsgId,
        CMD_ID_SERV_G2RcommonMsgId,
        CMD_ID_SERV_R2GcommonMsgId,
    };
    static const char *extraTextFormatInfo = "\006\000\003Q\000\001\003Q\000\002\003I\000\003\003I\000\004\003K\000\005\003K\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CMD_ID_SERV)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CMD_ID_SERV_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CMD_ID_SERV_IsValidValue(int32_t value__) {
  switch (value__) {
    case CMD_ID_SERV_R2GclientOnlineMsgId:
    case CMD_ID_SERV_G2RclientOnlineMsgId:
    case CMD_ID_SERV_R2GpingMsgId:
    case CMD_ID_SERV_G2RpongMsgId:
    case CMD_ID_SERV_G2RcommonMsgId:
    case CMD_ID_SERV_R2GcommonMsgId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - R2GClientOnlineMsg

@implementation R2GClientOnlineMsg

@dynamic hasName, name;
@dynamic hasNodeId, nodeId;
@dynamic hasNodeType, nodeType;
@dynamic hasKeepAlive, keepAlive;

typedef struct R2GClientOnlineMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t nodeId;
  int32_t keepAlive;
  NSString *name;
  NSString *nodeType;
} R2GClientOnlineMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GClientOnlineMsg_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(R2GClientOnlineMsg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nodeId",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GClientOnlineMsg_FieldNumber_NodeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(R2GClientOnlineMsg__storage_, nodeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nodeType",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GClientOnlineMsg_FieldNumber_NodeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(R2GClientOnlineMsg__storage_, nodeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keepAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GClientOnlineMsg_FieldNumber_KeepAlive,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(R2GClientOnlineMsg__storage_, keepAlive),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[R2GClientOnlineMsg class]
                                     rootClass:[ServRoot class]
                                          file:ServRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(R2GClientOnlineMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\006\000\003\010\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - G2RClientOnlineMsg

@implementation G2RClientOnlineMsg

@dynamic hasNodeName, nodeName;

typedef struct G2RClientOnlineMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *nodeName;
} G2RClientOnlineMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nodeName",
        .dataTypeSpecific.clazz = Nil,
        .number = G2RClientOnlineMsg_FieldNumber_NodeName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(G2RClientOnlineMsg__storage_, nodeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[G2RClientOnlineMsg class]
                                     rootClass:[ServRoot class]
                                          file:ServRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(G2RClientOnlineMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - R2GPingMsg

@implementation R2GPingMsg

@dynamic hasNodeName, nodeName;

typedef struct R2GPingMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *nodeName;
} R2GPingMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nodeName",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GPingMsg_FieldNumber_NodeName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(R2GPingMsg__storage_, nodeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[R2GPingMsg class]
                                     rootClass:[ServRoot class]
                                          file:ServRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(R2GPingMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - G2RPongMsg

@implementation G2RPongMsg

@dynamic hasNodeName, nodeName;

typedef struct G2RPongMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *nodeName;
} G2RPongMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nodeName",
        .dataTypeSpecific.clazz = Nil,
        .number = G2RPongMsg_FieldNumber_NodeName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(G2RPongMsg__storage_, nodeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[G2RPongMsg class]
                                     rootClass:[ServRoot class]
                                          file:ServRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(G2RPongMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - G2RCommonMsg

@implementation G2RCommonMsg

@dynamic hasFromNode, fromNode;
@dynamic hasPlayerId, playerId;
@dynamic hasMsgId, msgId;
@dynamic hasMsg, msg;

typedef struct G2RCommonMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgId;
  NSString *fromNode;
  NSData *msg;
  int64_t playerId;
} G2RCommonMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromNode",
        .dataTypeSpecific.clazz = Nil,
        .number = G2RCommonMsg_FieldNumber_FromNode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(G2RCommonMsg__storage_, fromNode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = G2RCommonMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(G2RCommonMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = G2RCommonMsg_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(G2RCommonMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = G2RCommonMsg_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(G2RCommonMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[G2RCommonMsg class]
                                     rootClass:[ServRoot class]
                                          file:ServRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(G2RCommonMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\010\000\003\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - R2GCommonMsg

@implementation R2GCommonMsg

@dynamic hasPlayerId, playerId;
@dynamic hasChannelCode, channelCode;
@dynamic hasFilterPlayerIds, filterPlayerIds;
@dynamic hasMsgId, msgId;
@dynamic hasMsg, msg;

typedef struct R2GCommonMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgId;
  NSString *channelCode;
  NSString *filterPlayerIds;
  NSData *msg;
  int64_t playerId;
} R2GCommonMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GCommonMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(R2GCommonMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GCommonMsg_FieldNumber_ChannelCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(R2GCommonMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "filterPlayerIds",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GCommonMsg_FieldNumber_FilterPlayerIds,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(R2GCommonMsg__storage_, filterPlayerIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GCommonMsg_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(R2GCommonMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = R2GCommonMsg_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(R2GCommonMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[R2GCommonMsg class]
                                     rootClass:[ServRoot class]
                                          file:ServRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(R2GCommonMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\010\000\002\013\000\003\017\000\004\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
