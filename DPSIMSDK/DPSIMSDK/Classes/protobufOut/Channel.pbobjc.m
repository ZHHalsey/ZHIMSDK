// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Channel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChannelRoot

@implementation ChannelRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChannelRoot_FileDescriptor

static GPBFileDescriptor *ChannelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum CMD_ID_CHANNEL

GPBEnumDescriptor *CMD_ID_CHANNEL_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "C2SgetChannelInfoId\000S2CgetChannelInfoId\000"
        "C2SgetChannelMemberId\000S2CgetChannelMembe"
        "rId\000C2ScreateChannelId\000S2CcreateChannelI"
        "d\000S2CjoinChannelNoticeId\000C2SjoinChannelN"
        "oticeId\000C2SdepartureChannelId\000S2Cdepartu"
        "reChannelId\000S2CdepartureChannelNoticeId\000"
        "C2SdepartureChannelNoticeId\000C2SkickChann"
        "elMemberId\000S2CkickChannelMemberId\000S2Ckic"
        "kChannelMemberNoticeId\000C2SkickChannelMem"
        "berNoticeId\000C2SdestroyChannelId\000S2Cdestr"
        "oyChannelId\000S2CdestroyChannelWarnNoticeI"
        "d\000S2CdestroyChannelNoticeId\000C2SinviteCha"
        "nnelMemberId\000S2CinviteChannelMemberId\000S2"
        "CinviteChannelMemberNoticeId\000C2SjoinChan"
        "nelId\000S2CjoinChannelId\000C2SmodifyChannelN"
        "ameId\000S2CmodifyChannelNameId\000S2CmodifyCh"
        "annelNameNoticeId\000C2SmodifyChannelNameNo"
        "ticeId\000C2SmodifyChannelDescId\000S2CmodifyC"
        "hannelDescId\000S2CmodifyChannelDescNoticeI"
        "d\000C2SmodifyChannelDescNoticeId\000";
    static const int32_t values[] = {
        CMD_ID_CHANNEL_C2SgetChannelInfoId,
        CMD_ID_CHANNEL_S2CgetChannelInfoId,
        CMD_ID_CHANNEL_C2SgetChannelMemberId,
        CMD_ID_CHANNEL_S2CgetChannelMemberId,
        CMD_ID_CHANNEL_C2ScreateChannelId,
        CMD_ID_CHANNEL_S2CcreateChannelId,
        CMD_ID_CHANNEL_S2CjoinChannelNoticeId,
        CMD_ID_CHANNEL_C2SjoinChannelNoticeId,
        CMD_ID_CHANNEL_C2SdepartureChannelId,
        CMD_ID_CHANNEL_S2CdepartureChannelId,
        CMD_ID_CHANNEL_S2CdepartureChannelNoticeId,
        CMD_ID_CHANNEL_C2SdepartureChannelNoticeId,
        CMD_ID_CHANNEL_C2SkickChannelMemberId,
        CMD_ID_CHANNEL_S2CkickChannelMemberId,
        CMD_ID_CHANNEL_S2CkickChannelMemberNoticeId,
        CMD_ID_CHANNEL_C2SkickChannelMemberNoticeId,
        CMD_ID_CHANNEL_C2SdestroyChannelId,
        CMD_ID_CHANNEL_S2CdestroyChannelId,
        CMD_ID_CHANNEL_S2CdestroyChannelWarnNoticeId,
        CMD_ID_CHANNEL_S2CdestroyChannelNoticeId,
        CMD_ID_CHANNEL_C2SinviteChannelMemberId,
        CMD_ID_CHANNEL_S2CinviteChannelMemberId,
        CMD_ID_CHANNEL_S2CinviteChannelMemberNoticeId,
        CMD_ID_CHANNEL_C2SjoinChannelId,
        CMD_ID_CHANNEL_S2CjoinChannelId,
        CMD_ID_CHANNEL_C2SmodifyChannelNameId,
        CMD_ID_CHANNEL_S2CmodifyChannelNameId,
        CMD_ID_CHANNEL_S2CmodifyChannelNameNoticeId,
        CMD_ID_CHANNEL_C2SmodifyChannelNameNoticeId,
        CMD_ID_CHANNEL_C2SmodifyChannelDescId,
        CMD_ID_CHANNEL_S2CmodifyChannelDescId,
        CMD_ID_CHANNEL_S2CmodifyChannelDescNoticeId,
        CMD_ID_CHANNEL_C2SmodifyChannelDescNoticeId,
    };
    static const char *extraTextFormatInfo = "!\000\003P\000\001\003P\000\002\003R\000\003\003R\000\004\003O\000\005\003O\000\006\003S\000\007\003S\000\010\003R\000\t\003R\000\n\003X\000\013\003X\000\014\003S\000\r\003S\000\016\003Y\000\017\003Y\000\020\003P\000\021\003P\000\022\003Z\000\023\003V\000\024\003U\000\025\003U\000\026\003[\000\027\003M\000\030\003M\000\031\003S\000\032\003S\000\033\003Y\000\034\003Y\000\035\003S\000\036\003S\000\037\003Y\000 \003Y\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CMD_ID_CHANNEL)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CMD_ID_CHANNEL_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CMD_ID_CHANNEL_IsValidValue(int32_t value__) {
  switch (value__) {
    case CMD_ID_CHANNEL_C2SgetChannelInfoId:
    case CMD_ID_CHANNEL_S2CgetChannelInfoId:
    case CMD_ID_CHANNEL_C2SgetChannelMemberId:
    case CMD_ID_CHANNEL_S2CgetChannelMemberId:
    case CMD_ID_CHANNEL_C2ScreateChannelId:
    case CMD_ID_CHANNEL_S2CcreateChannelId:
    case CMD_ID_CHANNEL_S2CjoinChannelNoticeId:
    case CMD_ID_CHANNEL_C2SjoinChannelNoticeId:
    case CMD_ID_CHANNEL_C2SdepartureChannelId:
    case CMD_ID_CHANNEL_S2CdepartureChannelId:
    case CMD_ID_CHANNEL_S2CdepartureChannelNoticeId:
    case CMD_ID_CHANNEL_C2SdepartureChannelNoticeId:
    case CMD_ID_CHANNEL_C2SkickChannelMemberId:
    case CMD_ID_CHANNEL_S2CkickChannelMemberId:
    case CMD_ID_CHANNEL_S2CkickChannelMemberNoticeId:
    case CMD_ID_CHANNEL_C2SkickChannelMemberNoticeId:
    case CMD_ID_CHANNEL_C2SdestroyChannelId:
    case CMD_ID_CHANNEL_S2CdestroyChannelId:
    case CMD_ID_CHANNEL_S2CdestroyChannelWarnNoticeId:
    case CMD_ID_CHANNEL_S2CdestroyChannelNoticeId:
    case CMD_ID_CHANNEL_C2SinviteChannelMemberId:
    case CMD_ID_CHANNEL_S2CinviteChannelMemberId:
    case CMD_ID_CHANNEL_S2CinviteChannelMemberNoticeId:
    case CMD_ID_CHANNEL_C2SjoinChannelId:
    case CMD_ID_CHANNEL_S2CjoinChannelId:
    case CMD_ID_CHANNEL_C2SmodifyChannelNameId:
    case CMD_ID_CHANNEL_S2CmodifyChannelNameId:
    case CMD_ID_CHANNEL_S2CmodifyChannelNameNoticeId:
    case CMD_ID_CHANNEL_C2SmodifyChannelNameNoticeId:
    case CMD_ID_CHANNEL_C2SmodifyChannelDescId:
    case CMD_ID_CHANNEL_S2CmodifyChannelDescId:
    case CMD_ID_CHANNEL_S2CmodifyChannelDescNoticeId:
    case CMD_ID_CHANNEL_C2SmodifyChannelDescNoticeId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C2SGetChannelTypeMsg

@implementation C2SGetChannelTypeMsg

@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;

typedef struct C2SGetChannelTypeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t playerId;
  int64_t channelId;
} C2SGetChannelTypeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelTypeMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SGetChannelTypeMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelTypeMsg_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SGetChannelTypeMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelTypeMsg_FieldNumber_ChannelCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SGetChannelTypeMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SGetChannelTypeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SGetChannelTypeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CGetChannelTypeMsg

@implementation S2CGetChannelTypeMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasContent, content;

typedef struct S2CGetChannelTypeMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *content;
} S2CGetChannelTypeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelTypeMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CGetChannelTypeMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelTypeMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CGetChannelTypeMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelTypeMsg_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CGetChannelTypeMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CGetChannelTypeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CGetChannelTypeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SGetChannelMemberMsg

@implementation C2SGetChannelMemberMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;

typedef struct C2SGetChannelMemberMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} C2SGetChannelMemberMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelMemberMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SGetChannelMemberMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelMemberMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SGetChannelMemberMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelMemberMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SGetChannelMemberMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SGetChannelMemberMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SGetChannelMemberMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SGetChannelMemberMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SGetChannelMemberMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\010\000\003\t\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CGetChannelMemberMsg

@implementation S2CGetChannelMemberMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasContent, content;

typedef struct S2CGetChannelMemberMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *content;
  int64_t requestId;
} S2CGetChannelMemberMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelMemberMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CGetChannelMemberMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelMemberMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CGetChannelMemberMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelMemberMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CGetChannelMemberMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CGetChannelMemberMsg_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CGetChannelMemberMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CGetChannelMemberMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CGetChannelMemberMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SCreateChannelMsg

@implementation C2SCreateChannelMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelTypeCode, channelTypeCode;
@dynamic hasChannelName, channelName;
@dynamic hasChannelDesc, channelDesc;
@dynamic hasMemberIds, memberIds;

typedef struct C2SCreateChannelMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelTypeCode;
  NSString *channelName;
  NSString *channelDesc;
  NSString *memberIds;
  int64_t requestId;
  int64_t playerId;
} C2SCreateChannelMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SCreateChannelMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SCreateChannelMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SCreateChannelMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SCreateChannelMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelTypeCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SCreateChannelMsg_FieldNumber_ChannelTypeCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SCreateChannelMsg__storage_, channelTypeCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelName",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SCreateChannelMsg_FieldNumber_ChannelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SCreateChannelMsg__storage_, channelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelDesc",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SCreateChannelMsg_FieldNumber_ChannelDesc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2SCreateChannelMsg__storage_, channelDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberIds",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SCreateChannelMsg_FieldNumber_MemberIds,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(C2SCreateChannelMsg__storage_, memberIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SCreateChannelMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SCreateChannelMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\t\000\002\010\000\003\017\000\004\013\000\005\013\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CCreateChannelMsg

@implementation S2CCreateChannelMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;

typedef struct S2CCreateChannelMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  int64_t requestId;
  int64_t channelId;
} S2CCreateChannelMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CCreateChannelMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CCreateChannelMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CCreateChannelMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CCreateChannelMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CCreateChannelMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CCreateChannelMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CCreateChannelMsg_FieldNumber_ChannelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CCreateChannelMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CCreateChannelMsg_FieldNumber_ChannelCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CCreateChannelMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CCreateChannelMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CCreateChannelMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\t\000\004\t\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CJoinChannelNotice

@implementation S2CJoinChannelNotice

@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasMemberIds, memberIds;
@dynamic hasInviter, inviter;
@dynamic hasContent, content;

typedef struct S2CJoinChannelNotice__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *memberIds;
  NSString *content;
  int64_t channelId;
  int64_t inviter;
} S2CJoinChannelNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelNotice_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CJoinChannelNotice__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelNotice_FieldNumber_ChannelCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CJoinChannelNotice__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberIds",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelNotice_FieldNumber_MemberIds,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CJoinChannelNotice__storage_, memberIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelNotice_FieldNumber_Inviter,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CJoinChannelNotice__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelNotice_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CJoinChannelNotice__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CJoinChannelNotice class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CJoinChannelNotice__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\013\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SDepartureChannelMsg

@implementation C2SDepartureChannelMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;

typedef struct C2SDepartureChannelMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} C2SDepartureChannelMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SDepartureChannelMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SDepartureChannelMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SDepartureChannelMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SDepartureChannelMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SDepartureChannelMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SDepartureChannelMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SDepartureChannelMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SDepartureChannelMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SDepartureChannelMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SDepartureChannelMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\010\000\003\t\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CDepartureChannelMsg

@implementation S2CDepartureChannelMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;

typedef struct S2CDepartureChannelMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} S2CDepartureChannelMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CDepartureChannelMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CDepartureChannelMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CDepartureChannelMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelMsg_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CDepartureChannelMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelMsg_FieldNumber_ChannelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CDepartureChannelMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelMsg_FieldNumber_ChannelCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CDepartureChannelMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CDepartureChannelMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CDepartureChannelMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\t\000\004\010\000\005\t\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CDepartureChannelNoticeMsg

@implementation S2CDepartureChannelNoticeMsg

@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;

typedef struct S2CDepartureChannelNoticeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t playerId;
  int64_t channelId;
} S2CDepartureChannelNoticeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelNoticeMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CDepartureChannelNoticeMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelNoticeMsg_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CDepartureChannelNoticeMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CDepartureChannelNoticeMsg_FieldNumber_ChannelCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CDepartureChannelNoticeMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CDepartureChannelNoticeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CDepartureChannelNoticeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SKickChannelMemberMsg

@implementation C2SKickChannelMemberMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasTargetPlayerId, targetPlayerId;

typedef struct C2SKickChannelMemberMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
  int64_t targetPlayerId;
} C2SKickChannelMemberMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SKickChannelMemberMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SKickChannelMemberMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SKickChannelMemberMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SKickChannelMemberMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SKickChannelMemberMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SKickChannelMemberMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SKickChannelMemberMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SKickChannelMemberMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetPlayerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SKickChannelMemberMsg_FieldNumber_TargetPlayerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2SKickChannelMemberMsg__storage_, targetPlayerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SKickChannelMemberMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SKickChannelMemberMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\010\000\003\t\000\004\013\000\005\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CKickChannelMemberMsg

@implementation S2CKickChannelMemberMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasTargetPlayerId, targetPlayerId;

typedef struct S2CKickChannelMemberMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
  int64_t targetPlayerId;
} S2CKickChannelMemberMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_ChannelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_ChannelCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetPlayerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberMsg_FieldNumber_TargetPlayerId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberMsg__storage_, targetPlayerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CKickChannelMemberMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CKickChannelMemberMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\t\000\004\010\000\005\t\000\006\013\000\007\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CKickChannelMemberNoticeMsg

@implementation S2CKickChannelMemberNoticeMsg

@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasTargetPlayerId, targetPlayerId;

typedef struct S2CKickChannelMemberNoticeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t channelId;
  int64_t targetPlayerId;
} S2CKickChannelMemberNoticeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberNoticeMsg_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberNoticeMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberNoticeMsg_FieldNumber_ChannelCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberNoticeMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetPlayerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CKickChannelMemberNoticeMsg_FieldNumber_TargetPlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CKickChannelMemberNoticeMsg__storage_, targetPlayerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CKickChannelMemberNoticeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CKickChannelMemberNoticeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\013\000\003\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SInviteChannelMemberMsg

@implementation C2SInviteChannelMemberMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasTargetPlayerIds, targetPlayerIds;

typedef struct C2SInviteChannelMemberMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *targetPlayerIds;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} C2SInviteChannelMemberMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SInviteChannelMemberMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SInviteChannelMemberMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SInviteChannelMemberMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SInviteChannelMemberMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SInviteChannelMemberMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SInviteChannelMemberMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SInviteChannelMemberMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SInviteChannelMemberMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetPlayerIds",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SInviteChannelMemberMsg_FieldNumber_TargetPlayerIds,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2SInviteChannelMemberMsg__storage_, targetPlayerIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SInviteChannelMemberMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SInviteChannelMemberMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\010\000\003\t\000\004\013\000\005\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CInviteChannelMemberMsg

@implementation S2CInviteChannelMemberMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasTargetPlayerIds, targetPlayerIds;

typedef struct S2CInviteChannelMemberMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  NSString *targetPlayerIds;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} S2CInviteChannelMemberMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_ChannelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_ChannelCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetPlayerIds",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberMsg_FieldNumber_TargetPlayerIds,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberMsg__storage_, targetPlayerIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CInviteChannelMemberMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CInviteChannelMemberMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\t\000\004\010\000\005\t\000\006\013\000\007\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CInviteChannelMemberNoticeMsg

@implementation S2CInviteChannelMemberNoticeMsg

@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasInviter, inviter;
@dynamic hasContent, content;

typedef struct S2CInviteChannelMemberNoticeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *content;
  int64_t playerId;
  int64_t channelId;
  int64_t inviter;
} S2CInviteChannelMemberNoticeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberNoticeMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberNoticeMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberNoticeMsg_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberNoticeMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberNoticeMsg_FieldNumber_ChannelCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberNoticeMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberNoticeMsg_FieldNumber_Inviter,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberNoticeMsg__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CInviteChannelMemberNoticeMsg_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CInviteChannelMemberNoticeMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CInviteChannelMemberNoticeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CInviteChannelMemberNoticeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SJoinChannelMsg

@implementation C2SJoinChannelMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasInviter, inviter;

typedef struct C2SJoinChannelMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
  int64_t inviter;
} C2SJoinChannelMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SJoinChannelMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SJoinChannelMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SJoinChannelMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SJoinChannelMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SJoinChannelMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SJoinChannelMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SJoinChannelMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SJoinChannelMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SJoinChannelMsg_FieldNumber_Inviter,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2SJoinChannelMsg__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SJoinChannelMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SJoinChannelMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\010\000\003\t\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CJoinChannelMsg

@implementation S2CJoinChannelMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasInviter, inviter;

typedef struct S2CJoinChannelMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
  int64_t inviter;
} S2CJoinChannelMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_ChannelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_ChannelCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CJoinChannelMsg_FieldNumber_Inviter,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CJoinChannelMsg__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CJoinChannelMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CJoinChannelMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\t\000\004\010\000\005\t\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SModifyChannelNameMsg

@implementation C2SModifyChannelNameMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasChannelName, channelName;

typedef struct C2SModifyChannelNameMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *channelName;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} C2SModifyChannelNameMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelNameMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SModifyChannelNameMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelNameMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SModifyChannelNameMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelNameMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SModifyChannelNameMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelNameMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SModifyChannelNameMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelName",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelNameMsg_FieldNumber_ChannelName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2SModifyChannelNameMsg__storage_, channelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SModifyChannelNameMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SModifyChannelNameMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\010\000\003\t\000\004\013\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CModifyChannelNameMsg

@implementation S2CModifyChannelNameMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasChannelName, channelName;

typedef struct S2CModifyChannelNameMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  NSString *channelName;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} S2CModifyChannelNameMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_ChannelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_ChannelCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelName",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameMsg_FieldNumber_ChannelName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameMsg__storage_, channelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CModifyChannelNameMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CModifyChannelNameMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\t\000\004\010\000\005\t\000\006\013\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CModifyChannelNameNoticeMsg

@implementation S2CModifyChannelNameNoticeMsg

@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasChannelName, channelName;
@dynamic hasModifierId, modifierId;
@dynamic hasModifierRoleName, modifierRoleName;
@dynamic hasModifierNickName, modifierNickName;

typedef struct S2CModifyChannelNameNoticeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *channelName;
  NSString *modifierRoleName;
  NSString *modifierNickName;
  int64_t playerId;
  int64_t channelId;
  int64_t modifierId;
} S2CModifyChannelNameNoticeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_ChannelCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelName",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_ChannelName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, channelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifierId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_ModifierId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, modifierId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "modifierRoleName",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_ModifierRoleName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, modifierRoleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifierNickName",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelNameNoticeMsg_FieldNumber_ModifierNickName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CModifyChannelNameNoticeMsg__storage_, modifierNickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CModifyChannelNameNoticeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CModifyChannelNameNoticeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\t\000\003\013\000\004\013\000\005\n\000\006\020\000\007\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C2SModifyChannelDescMsg

@implementation C2SModifyChannelDescMsg

@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasChannelDesc, channelDesc;

typedef struct C2SModifyChannelDescMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *channelDesc;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} C2SModifyChannelDescMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelDescMsg_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C2SModifyChannelDescMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelDescMsg_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C2SModifyChannelDescMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelDescMsg_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C2SModifyChannelDescMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelDescMsg_FieldNumber_ChannelCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C2SModifyChannelDescMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelDesc",
        .dataTypeSpecific.clazz = Nil,
        .number = C2SModifyChannelDescMsg_FieldNumber_ChannelDesc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C2SModifyChannelDescMsg__storage_, channelDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C2SModifyChannelDescMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C2SModifyChannelDescMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\010\000\003\t\000\004\013\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CModifyChannelDescMsg

@implementation S2CModifyChannelDescMsg

@dynamic hasCode, code;
@dynamic hasMsg, msg;
@dynamic hasRequestId, requestId;
@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasChannelDesc, channelDesc;

typedef struct S2CModifyChannelDescMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *msg;
  NSString *channelCode;
  NSString *channelDesc;
  int64_t requestId;
  int64_t playerId;
  int64_t channelId;
} S2CModifyChannelDescMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_ChannelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_ChannelCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelDesc",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescMsg_FieldNumber_ChannelDesc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescMsg__storage_, channelDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CModifyChannelDescMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CModifyChannelDescMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\t\000\004\010\000\005\t\000\006\013\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - S2CModifyChannelDescNoticeMsg

@implementation S2CModifyChannelDescNoticeMsg

@dynamic hasPlayerId, playerId;
@dynamic hasChannelId, channelId;
@dynamic hasChannelCode, channelCode;
@dynamic hasChannelDesc, channelDesc;
@dynamic hasModifierId, modifierId;
@dynamic hasModifierRoleName, modifierRoleName;
@dynamic hasModifierNickName, modifierNickName;

typedef struct S2CModifyChannelDescNoticeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelCode;
  NSString *channelDesc;
  NSString *modifierRoleName;
  NSString *modifierNickName;
  int64_t playerId;
  int64_t channelId;
  int64_t modifierId;
} S2CModifyChannelDescNoticeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelCode",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_ChannelCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, channelCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelDesc",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_ChannelDesc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, channelDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifierId",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_ModifierId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, modifierId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "modifierRoleName",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_ModifierRoleName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, modifierRoleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifierNickName",
        .dataTypeSpecific.clazz = Nil,
        .number = S2CModifyChannelDescNoticeMsg_FieldNumber_ModifierNickName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(S2CModifyChannelDescNoticeMsg__storage_, modifierNickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S2CModifyChannelDescNoticeMsg class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S2CModifyChannelDescNoticeMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\t\000\003\013\000\004\013\000\005\n\000\006\020\000\007\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
